Bueno, la clase pasada habiamos estado viendo uml, habiamos estado
viendo como desarrollar diagramas uml con IA. 

Y habiamos hablado un poco de un sistema, bien hecho, seria siempre primero armar los planos, los diagramas y apartir de ahí generamos la codificacion.

Habiamos entrado a paginas como:
Diagramasuml.com

Donde les habia recomendado que miraran un poco ahí los distintos
diagramas existentes.
Les mostre el diagrama de secuencia. Que era un diagrama
dinamico del sistema. Donde veiamos los objetos.

Y habiamos hablando un poco para crear un par de clases, que
le habiamos pedido a la IA y despues se lo pedimos en Mermaid.
Para obtener lo que era el diagrama.

Y habia pasado un promp propio de una clase libro, con usuario.
Que bueno, en el caso de la biblioteca me lo habia heho, pero
yo lo habia querido usar porque en un caso no me lo hacia como 
quiisera.
**********************************************
Bueno, entonces nos quedaba un temita que era el tema de componentes

Habia estado hablando un poco de html. Si voy al  VSC
voy a crear un nuevo archivo, lo guardo como index.html
Este documento shift! + tab

Un documento web es un documento estructural, que tiene marcas
o etiquetas. Voy a tener datos y metadatos. 
DOCTYPE dice que es html5
html lang dice el lenguaje.
En el encabezado esta lo que es la metadata. Lo que esta en celeste son atributos.

Entonces en la parte del body ponemos los elementos
que se van   a mostrar en la pagina

<h1> Hola Mundo </h1>

Tengo elemento de parrafo:

<p> Este es un ejemplo de parrafo </p>

Para imagenes es
<img src="" alt="">  -- En source pongo la url


html estructural
css  maquetado aspecto
js   

HOJA DE ESTILOS EXTERNA .css
yo en el head puedo poner por ejempo un link +tab:
<link rel="Stylesheet" href="css/estilos.css">

Ctrol + click en el link para crear el archivo
en el .css
h1 {
   color: blue;
}


Y tengo Javascript. Esto en gral se crea un archivo .js
que se vincula al archivo html mediante el elemento
"Script"
Entonces yo escribo en el BODY
script + Tab
<script src="js/main.js"></script>


Cuando se trabaja con Javascript puro, sin ninguna
libreria se dice que se trabaja con Javascripto vanilla

Voy  a crear una carpeta que se llame componentes
Creo un nuevo index.html

En title pongo Componentes en html

voy a crear 3 en el body:
script src ="js/login.js"
script src ="js/contenido.js"
script src ="js/main.js"

ctrol + click creo los archivos.

Router?



Un componente es un objeto que tiene representación visual y puede
interactuar con otros componentes y con los usuarios.

Y estos pueden estar compuestos por varios componentes mas. Ejemplos son campos de textos o botones.

Por ejemplo, un formulario puede ser un componente que contiene varios componentes más pequeños como campos de texto, botones y etiquetas, todos interactuando entre sí.

En su momento cuando empezaron a surgir los lenguajes de programmación orientada a objetos, la idea que se tenia era la posibilidad de reutilizar codigo.
Y En los IDES se fueron integrrando Paletas de componentees

Con el paso del tiempo se fueron creando Estandares conocidos como 
COM/DCOM 
Que esto es significa modelo de objetos componentes distribuidos,
Que era una tecnologiia propiia de microsoft para eel desarrollar 
componentes de software disstribuidos en varias compuutadoras.

Todos estos estandares con el avance de la tecnologia fueron quedando un poco
atras. Con la llegada de la interneet practicamnte todo se fue transicionando
al desarrollo web.
Y así es como podemos decir que llegamos a la era actual, donde surgieron
los frameworks basados en componentes como react, angular, etc etc..

[Y que son estos frameworks?
son herramientas para desarrollar aplicaciones web. Organizan la interfaz de usuario en componentes reutilizables, donde cada componente encapsula su lógica, estilo y estructura. Esto permite construir aplicaciones modulares, más fáciles de mantener y escalar.



Entonces con los componentes se gana muchas ventajas, o tenemos beneficios
como 
facilidad en la mantenibilidad, reutilización y modularidad del codigo.


Buen en Javascript tenemos que los componentes tienen su propia estructura.
Son archivos con su propio codigo html, Css y lógica.
Y se utilizan clases para definir los componentes con sus propiedades y metodos.

Class Componente {}


Explicación simple:
"Imagina que estás construyendo una página web, como si fuera una casa. Cada parte de la casa, como las ventanas, puertas, o el techo, son componentes. Cada uno tiene una función específica, pero todos trabajan juntos para hacer que la casa funcione.

En el mundo de la programación, un componente es una parte de la página web (como una ventana, un botón o un campo de texto) que se puede construir por separado, pero que luego se combina con otros para crear la página completa. Cada componente tiene su propio comportamiento y apariencia, y se puede usar muchas veces en diferentes lugares."


Ejemplo práctico:
Ejemplo: Botón de "Me gusta" Imagina que quieres agregar un botón en tu página que diga "Me gusta". En lugar de escribir el mismo código una y otra vez, creas un componente que será solo ese botón. Así, cuando lo necesites en diferentes partes de la página, simplemente lo "llamas" y usas el mismo código.

Prompt:
Dame un ejemplo de un código HTML básico con un botón de 'Me gusta'. El botón debe cambiar su apariencia con CSS y mostrar un mensaje de alerta cuando se haga clic en él.




Cómo demostrarlo:
Muestra cómo se crea un botón que, al hacer clic, muestra un mensaje de "¡Te gusta!".
Luego, explica que este botón es un componente: tiene su propio diseño (el color, el texto), y una acción específica (el mensaje al hacer clic).
Explica que si más tarde quisieras agregar otro botón en la página, solo tendrías que copiar el mismo código de ese componente en lugar de escribir todo el código nuevamente.
Cierre:
"Lo importante es que los componentes nos permiten reutilizar partes de nuestra página o aplicación sin tener que escribir el mismo código una y otra vez, haciéndolo más organizado y fácil de manejar."

Este enfoque es simple, visual y tiene el propósito de hacer que los alumnos comprendan la idea sin entrar en definiciones técnicas complicadas.




****************************navegación entre componentes *******************








